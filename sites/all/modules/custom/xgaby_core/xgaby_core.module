<?php

/**
 * @file
 * Main module file.
 */

/**
 * Implements hook_menu().
 */
function xgaby_core_menu() {
  $items['admin/config/general_xgaby_settings'] = array(
    'title' => 'Global XGABYMOOR Settings',
    'type' => MENU_LOCAL_TASK,
    'description' => "Configure your sitewide XGABYMOOR settings.",
    'page callback' => 'drupal_get_form',
    'page arguments' => array('xgaby_core_admin_form'),
    'access arguments' => array('administer nodes'),
    'file' => 'xgaby_core.admin.inc',
    'weight' => 5,
  );

  return $items;
}

/**
 * Implements hook_block_info().
 */
function xgaby_core_block_info() {
  $blocks = array();

  $blocks['xgaby_social'] = array(
    'info' => t('XGaby social block'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['xgaby_home_main'] = array(
    'info' => t('Main Block on home page'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['xgaby_mini_contact'] = array(
    'info' => t('Bottom Contact Mini'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  $blocks['xgaby_find_me_links'] = array(
    'info' => t('Find Me Links'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );

  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function xgaby_core_block_view($delta = '') {
  $block = array();

  switch ($delta) {

    case 'xgaby_social':
      $vars = _xgaby_core_get_social_data();
      $block['content'] = theme('xgaby_social', $vars);
      break;

    case 'xgaby_home_main':

      $main_menu = menu_navigation_links('main-menu');
      $vars['main_menu'] = theme('links__system_main_menu', array(
        'links' => $main_menu,
        'attributes' => array(
          'id' => 'main-menu',
          'class' => array('links', 'inline', 'clearfix')),
        //'heading' => t('Main menu'),
      ));

      $block['content'] = theme('xgaby_home_main', $vars);
      break;

    case 'xgaby_mini_contact':
      $mini_footer = variable_get('xgaby_mini_contact');
      if ($mini_footer) {
        $block['content'] = $mini_footer;
      }
      break;

    case 'xgaby_find_me_links':

      $vars = ['links' => []];
      $quantity = range(0, 2);

      foreach ($quantity as $source) {
        if ($source = variable_get('xgaby_find_me_link_' . ++$source)) {
          $vars['links'][] = $source;
        }
      }

      if (!empty($vars['links'])) {
        $block['subject'] = t('Find me live on');
        $block['content'] = theme('xgaby_find_me_links', $vars);
      }
      break;
  }

  return $block;
}

/**
 * Helper funtion.
 * 
 * Detect the total number of bows.
 * @todo: Cache. Join Article type and check for bows:?
 */
//function _papio_core_count_bows() {
//
//  $query = db_select('node', 'n')
//    ->fields('n')
//    ->condition('type', 'article')
//    ->condition('status', 1);
//  $bows_count = $query->execute()->rowCount();
//
//  if ($bows_count) {
//    // Add additional zeros in order to have at least 4 digits number.
//    $bows_count_array = str_split($bows_count);
//    $bows_count_array_count = count($bows_count_array);
//
//    if ($bows_count_array_count < 4) {
//      for ($i = 1; $i <= 4 - $bows_count_array_count; $i++) {
//        $additional_zero[] = 0;
//      }
//    }
//
//    if (isset($additional_zero)) {
//      $bows_count_array = array_merge($additional_zero, $bows_count_array);
//    }
//  }
//
//  return $bows_count_array;
//}

/**
 * Helper function to retrieve the social buttons data.
 *
 * @todo Re-thing the logic. Be beautiful.
 */
function _xgaby_core_get_social_data() {
  static $vars = array();
  if (!empty($vars)) {
    return $vars;
  }
  $footer_vars = array(
    'twitter_site_url',
    'youtube_site_url',
    'pininterest_site_url',
    'skype_site_url',
    'gplus_site_url',
  );

  foreach ($footer_vars as $var_name) {
    if ($var = variable_get($var_name)) {
      $vars[$var_name] = $var;
    }
  }
  $vars['social_count'] = count($vars);

  return $vars;
}

/**
 * Implements hook_theme().
 */
function xgaby_core_theme($existing, $type, $theme, $path) {
  return array(
    'xgaby_social' => array(
      'template' => 'xgaby-social',
      'arguments' => array('vars' => NULL),
      'path' => $path . '/theme',
    ),
    'xgaby_home_main' => array(
      'template' => 'xgaby-home-main',
      'arguments' => array('vars' => NULL),
      'path' => $path . '/theme',
    ),
    'xgaby_find_me_links' => array(
      'template' => 'xgaby-find-me-links',
      'arguments' => array('vars' => NULL),
      'path' => $path . '/theme',
    ),
  );
}

/**
 * Implements hook_node_view().
 */
function HOOK_node_view($node, $view_mode) {

  switch ($view_mode) {
    case 'teaser':
      if (!empty($node->content['field_new'][0]['#markup'])) {
        $node->content['field_new'][0]['#markup'] = t('New!');
      }
      else {
        // Avoid empty field.
        unset($node->content['field_new']);
      }

      break;
  }
}

function fibonacci($n) {

//0, 1, 1, 2, 3, 5, 8, 13, 21

  /* this is an error condition
    returning -1 is arbitrary - we could
    return anything we want for this
    error condition:
   */
  if ($n < 0)
    return -1;

  if ($n == 0)
    return 0;

  if ($n == 1 || $n == 2)
    return 1;

  $int1 = 1;
  $int2 = 1;

  $fib = 0;

//start from n==3
  for ($i = 1; $i <= $n - 2; $i++) {
    $fib = $int1 + $int2;
//swap the values out:
    $int2 = $int1;
    $int1 = $fib;
  }

  return $fib;
}

function HOOK_preprocess_html(&$vars) {
  $bing_tag = array(
    '#tag' => 'meta', // The #tag is the html tag - <link />
    '#attributes' => array(
      'name' => 'msvalidate.01',
      'content' => 'To be added...',
    ),
  );

  drupal_add_html_head($bing_tag, 'bing_search_index');
}

function HOOK_preprocess_page(&$variables) {

  // Add header variables for usage in page.tpl.php file.
  if ($header_line_1 = variable_get('header_line_1')) {
    $variables['header_line_1'] = $header_line_1;
  }
  if ($header_line_2 = variable_get('header_line_2')) {
    $variables['header_line_2'] = $header_line_2;
  }
}

//function HOOK_form_alter(&$form, &$form_state, $form_id);

function HOOK_preprocess_views_view(&$vars) {
  $view = &$vars['view'];
  if ($view->name == 'main_list' && $view->current_display == 'main_list') {
    //dsm($view, 'main list view');
  }
}
